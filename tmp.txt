==12665== Memcheck, a memory error detector
==12665== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==12665== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==12665== Command: ./heron --track-origin=yes
==12665== 
==12665== Conditional jump or move depends on uninitialised value(s)
==12665==    at 0x11DAAD: push_back (list.hpp:98)
==12665==    by 0x11DAAD: push_back (list.hpp:109)
==12665==    by 0x11DAAD: list (list.hpp:77)
==12665==    by 0x11DAAD: mesh::faces() const (mesh.cpp:86)
==12665==    by 0x11EA9F: test(mesh&) (test.cpp:5)
==12665==    by 0x10ACE5: main (test.cpp:25)
==12665== 
==12665== Conditional jump or move depends on uninitialised value(s)
==12665==    at 0x11DA2C: prev (node.hpp:60)
==12665==    by 0x11DA2C: push_back (list.hpp:101)
==12665==    by 0x11DA2C: push_back (list.hpp:109)
==12665==    by 0x11DA2C: list (list.hpp:77)
==12665==    by 0x11DA2C: mesh::faces() const (mesh.cpp:86)
==12665==    by 0x11EA9F: test(mesh&) (test.cpp:5)
==12665==    by 0x10ACE5: main (test.cpp:25)
==12665== 
==12665== Use of uninitialised value of size 8
==12665==    at 0x11DA2E: next (node.hpp:48)
==12665==    by 0x11DA2E: prev (node.hpp:61)
==12665==    by 0x11DA2E: push_back (list.hpp:101)
==12665==    by 0x11DA2E: push_back (list.hpp:109)
==12665==    by 0x11DA2E: list (list.hpp:77)
==12665==    by 0x11DA2E: mesh::faces() const (mesh.cpp:86)
==12665==    by 0x11EA9F: test(mesh&) (test.cpp:5)
==12665==    by 0x10ACE5: main (test.cpp:25)
==12665== 
==12665== Invalid write of size 8
==12665==    at 0x11DA2E: next (node.hpp:48)
==12665==    by 0x11DA2E: prev (node.hpp:61)
==12665==    by 0x11DA2E: push_back (list.hpp:101)
==12665==    by 0x11DA2E: push_back (list.hpp:109)
==12665==    by 0x11DA2E: list (list.hpp:77)
==12665==    by 0x11DA2E: mesh::faces() const (mesh.cpp:86)
==12665==    by 0x11EA9F: test(mesh&) (test.cpp:5)
==12665==    by 0x10ACE5: main (test.cpp:25)
==12665==  Address 0x111a is not stack'd, malloc'd or (recently) free'd
==12665== 
==12665== 
==12665== Process terminating with default action of signal 11 (SIGSEGV)
==12665==  Access not within mapped region at address 0x111A
==12665==    at 0x11DA2E: next (node.hpp:48)
==12665==    by 0x11DA2E: prev (node.hpp:61)
==12665==    by 0x11DA2E: push_back (list.hpp:101)
==12665==    by 0x11DA2E: push_back (list.hpp:109)
==12665==    by 0x11DA2E: list (list.hpp:77)
==12665==    by 0x11DA2E: mesh::faces() const (mesh.cpp:86)
==12665==    by 0x11EA9F: test(mesh&) (test.cpp:5)
==12665==    by 0x10ACE5: main (test.cpp:25)
==12665==  If you believe this happened as a result of a stack
==12665==  overflow in your program's main thread (unlikely but
==12665==  possible), you can try to increase the size of the
==12665==  main thread stack using the --main-stacksize= flag.
==12665==  The main thread stack size used in this run was 8388608.
==12665== 
==12665== HEAP SUMMARY:
==12665==     in use at exit: 83,829 bytes in 311 blocks
==12665==   total heap usage: 363 allocs, 52 frees, 94,956 bytes allocated
==12665== 
==12665== LEAK SUMMARY:
==12665==    definitely lost: 6,240 bytes in 181 blocks
==12665==    indirectly lost: 0 bytes in 0 blocks
==12665==      possibly lost: 0 bytes in 0 blocks
==12665==    still reachable: 77,589 bytes in 130 blocks
==12665==         suppressed: 0 bytes in 0 blocks
==12665== Rerun with --leak-check=full to see details of leaked memory
==12665== 
==12665== Use --track-origins=yes to see where uninitialised values come from
==12665== For lists of detected and suppressed errors, rerun with: -s
==12665== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
